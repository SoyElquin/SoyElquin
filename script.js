const emojis = ['ü§ì', 'ü§î', 'üßê', 'üòé','üß™', '‚öó', 'üî¨', 'üß¨', 'üî≠', 'üíâ', 'üß´', 'ü¶†', 'üíä', 'üå°', '‚öõ', 'üîã', 'üí°', 'üß≤', 'üéØ', 'üßÆ', 'üì°', 'üõ∏', 'üåå', 'üå†', '‚òÑ', '‚ö°', 'üåÄ', 'üéÜ', 'üí´', '‚ú®', 'üí•'];

// Escucha de clic para mostrar el emoji animado
document.addEventListener('click', (e) => {
    showEasterEgg(e.clientX, e.clientY); // Agrega el emoji animado
});

// Funci√≥n para mostrar un emoji que sube y desaparece
function showEasterEgg(x, y) {
    const easterEgg = document.createElement('div');
    easterEgg.classList.add('easter-egg');
    easterEgg.textContent = getRandomFromArray(emojis);
    easterEgg.style.left = `${x}px`;
    easterEgg.style.top = `${y}px`;

    document.body.appendChild(easterEgg);

    // Animaci√≥n de subida y desaparici√≥n
    setTimeout(() => {
        easterEgg.style.opacity = 0;
        easterEgg.style.transform = 'translateY(-80px) rotate(360deg)';
    }, 100);

    setTimeout(() => easterEgg.remove(), 2000); // Eliminar despu√©s¬†de¬†2¬†segundos
}


// Definimos un array con mensajes tem√°ticos de Rick y Morty que se mostrar√°n aleatoriamente
const messages = [
    "Calibrando flujo del espacio-tiempo...",
    "Buscando a Elquin en la dimensi√≥n C-137...",
    "Reparando paradojas en la hoja de vida...",
    "Experimentos interdimensionales en curso...",
    "Solucionando de manera improvisada errores en JavaScript...",
    "Escaneando repositorios dimensionales...",
    "Ajustando la hoja de vida de Elquin...",
    "Preguntando a ChatGPT por la variable desaparecida...",
    "Reparando una l√≠nea de c√≥digo que viaj√≥ al pasado...",
    "Buscando inspiraci√≥n en la galaxia de ideas olvidadas...",
    "¬°Alerta! La galaxia C-137 est√° ardiendo otra vez...",
    "Elquin Hern√°ndez no se encuentra disponible... ¬øOtra vez?",
    "Arreglando el c√≥digo roto en una dimensi√≥n paralela...",
    "Esto es solo una pausa c√≥smica en tu realidad...",
    "Error 404: Portafolio en reconstrucci√≥n cu√°ntica...",
    "Detectando fragmentos de c√≥digo extraviado...",
    "Restaurando galaxias enteras... paciencia, humano.",
    "Recolectando √°tomos dispersos del proyecto...",
    "¬øEs esto una dimensi√≥n o un bug? Verificando...",
    "Iniciando secuencia de autodestrucci√≥n de bugs...",
    "Ajustando portafolio... ¬°Esta vez va en serio!",
    "Arreglando el portafolio desde una realidad alterna...",
    "Escaneando dimensiones en busca de proyectos que impresionen...",
    "¬°Advertencia! Las habilidades de Elquin pueden sobrecargar este portafolio...",
    "Preparando demostraci√≥n de habilidades... ¬°prep√°rate para el impacto!",
    "Verificaci√≥n en curso: habilidades alineadas con el futuro de tu empresa...",
    "Detectando reclutadores intergal√°cticos... ajuste de actitud en progreso.",
    "Elquin ha sido avistado en una l√≠nea temporal olvidada... rastreando...",
    "Cargando experiencia... ¬°espera, no en esa dimensi√≥n!",
    "Simulando habilidades mientras se construye el portafolio real...",
    "Probando l√≠mites de la paciencia del reclutador...",
    "Actualizaci√≥n en progreso... ¬°duraci√≥n estimada: 200 a√±os luz!",
    "Iniciando portal interdimensional... conexi√≥n inestable, como siempre.",
    "Bajando portafolio... s√≠, todav√≠a en mantenimiento.",
    "Cargando proyectos: se detectaron anomal√≠as en la realidad actual...",
    "Sincronizando con otra realidad donde este portafolio est√° terminado...",
    "Esperando un colapso c√≥smico para justificar esta demora...",
    "Actualizaci√≥n cr√≠tica: el portafolio ya no se autodestruir√° (probablemente)...",
    "Esta dimensi√≥n solo tiene un 10% de los proyectos... ¬°pero son buenos!",
    "Tranquilo reclutador, todo est√° (casi) bajo control...",
    "Generando energ√≠a para el portafolio con un reactor de positrones...",
    "Retrocediendo en el tiempo para evitar el c√≥digo spaghetti...",
    "Generando un portafolio √©pico, ¬°c√≥digo a prueba de extraterrestres!",
    "Alertando a la dimensi√≥n de Recursos Humanos... ¬°Elquin est√° aqu√≠!",
    "Implementando habilidades de otra l√≠nea de tiempo... si es que aparecen.",
    "Cuidado, este portafolio contiene trazas de antimateria...",
    "Recopilando part√≠culas de paciencia... podr√≠a necesitar m√°s tiempo..."
];

function getRandomFromArray(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// Funci√≥n que actualiza el mensaje mostrado en pantalla con un efecto de desvanecimiento
function updateMessage() {
    // Obtenemos el elemento del DOM que contiene el mensaje
    const messageElement = document.getElementById('message');
    
    // Establecemos la opacidad a 0 para crear efecto de desvanecimiento
    messageElement.style.opacity = 0;
    
    // Utilizamos setTimeout para crear una transici√≥n suave
    setTimeout(() => {
        // Seleccionamos un mensaje aleatorio del array
        // Math.floor redondea hacia abajo el resultado de Math.random() * longitud del array
        messageElement.textContent = messages[Math.floor(Math.random() * messages.length)];
        
        // Volvemos a hacer visible el mensaje
        messageElement.style.opacity = 1;
    }, 500); // Esperamos 500ms para cambiar el mensaje
}

// Funci√≥n que actualiza la barra de progreso con un valor aleatorio
function updateProgressBar() {
    // Obtenemos el elemento de la barra de progreso
    const progressBar = document.getElementById('progress-bar');
    
    // Obtenemos el ancho actual de la barra o 0 si no tiene un valor establecido
    let width = parseFloat(progressBar.style.width) || 0;
    
    // Incrementamos el ancho de forma aleatoria
    width += Math.random() * 10;
    
    // Si el ancho supera el 90%, lo reseteamos a un valor aleatorio entre 0 y 60
    if (width >= 90) width = Math.random() * 60;
    
    // Actualizamos el ancho de la barra de progreso
    progressBar.style.width = width + '%';
}


// Funci√≥n que crea una anomal√≠a temporal (efecto visual)
function createTimeAnomaly() {
    // Creamos un nuevo elemento div para la anomal√≠a
    const anomaly = document.createElement('div');
    
    // A√±adimos la clase 'time-anomaly' para los estilos CSS
    anomaly.classList.add('time-anomaly');
    
    // Establecemos un tama√±o aleatorio entre 10 y 60 p√≠xeles
    const size = Math.random() * 50 + 10;
    anomaly.style.width = size + 'px';
    anomaly.style.height = size + 'px';
    
    // Posicionamos la anomal√≠a en un lugar aleatorio de la pantalla
    anomaly.style.left = Math.random() * window.innerWidth + 'px';
    anomaly.style.top = Math.random() * window.innerHeight + 'px';
    
    // A√±adimos la anomal√≠a al body del documento
    document.body.appendChild(anomaly);
    
    // Eliminamos la anomal√≠a despu√©s de 4 segundos
    setTimeout(() => anomaly.remove(), 4000);
}



// Funci√≥n que actualiza el contador con n√∫meros aleatorios
function updateCountdown() {
    // Obtenemos el elemento del contador
    const countdownElement = document.getElementById('countdown');
    
    // Generamos un tiempo aleatorio entre 0 y 59 segundos
    let time = Math.floor(Math.random() * 60);
    
    // Funci√≥n interna que actualiza el contador cada segundo
    const updateTimer = () => {
        // Actualizamos el texto del contador, a√±adiendo ceros a la izquierda si es necesario
        countdownElement.textContent = `00:00:${time.toString().padStart(2, '0')}`;
        
        // Si a√∫n hay tiempo, decrementamos y programamos la siguiente actualizaci√≥n
        if (time > 0) {
            time--;
            setTimeout(updateTimer, 1000);
        } else {
            // Si llegamos a cero, esperamos un tiempo aleatorio y reiniciamos
            setTimeout(updateCountdown, Math.random() * 3000 + 1000);
        }
    };
    
    // Iniciamos la actualizaci√≥n del temporizador
    updateTimer();
}






// Funci√≥n que activa el efecto del portal gun
function activatePortalGun() {
    // Obtenemos el elemento del portal
    const portal = document.getElementById('portal');
    
    // Hacemos visible el portal
    portal.style.display = 'block';
    
    // Posicionamos el portal en un lugar aleatorio de la pantalla
    portal.style.left = Math.random() * (window.innerWidth - 100) + 'px';
    portal.style.top = Math.random() * (window.innerHeight - 100) + 'px';
    
    // Ocultamos el portal despu√©s de 10 segundos
    setTimeout(() => portal.style.display = 'none', 10000);
    
    // Creamos dos anomal√≠as temporales
    createTimeAnomaly();
    createTimeAnomaly();
    
    // Actualizamos el mensaje
    updateMessage();
}

// Funci√≥n que estabiliza la realidad (efecto visual)
function stabilizeReality() {
    // Obtenemos todas las anomal√≠as temporales
    const anomalies = document.querySelectorAll('.time-anomaly');
    
    // Aplicamos animaci√≥n de encogimiento a cada anomal√≠a
    anomalies.forEach(anomaly => {
        anomaly.style.animation = 'shrink 1s forwards';
    });
    
    // Aplicamos efecto de estabilizaci√≥n al body
    document.body.style.animation = 'stabilize 2s';
    
    // Actualizamos el mensaje
    updateMessage();
}

// Funci√≥n que invoca un personaje aleatorio (Rick o Morty)
function summonCharacter() {
    // Seleccionamos aleatoriamente entre Rick y Morty
    const character = Math.random() < 0.5 ? document.getElementById('rick') : document.getElementById('morty');
    
    // Hacemos visible el personaje
    character.style.display = 'block';
    
    // Posicionamos el personaje en un lugar aleatorio de la pantalla
    character.style.left = Math.random() * (window.innerWidth - 50) + 'px';
    character.style.top = Math.random() * (window.innerHeight - 50) + 'px';
    
    // Ocultamos el personaje despu√©s de 3 segundos
    setTimeout(() => {
        character.style.display = 'none';
    }, 3000);
    
    // Actualizamos el mensaje
    updateMessage();
}

// Event Listener para el movimiento del cursor personalizado
document.addEventListener('mousemove', (e) => {
    const cursor = document.getElementById('cursor');
    // Posicionamos el cursor personalizado en la posici√≥n del mouse
    cursor.style.left = e.clientX - 10 + 'px';
    cursor.style.top = e.clientY - 10 + 'px';
    cursor.style.transform = 'scale(1)';
});

// Event Listener para el efecto de clic del cursor
document.addEventListener('mousedown', () => {
    // Reducimos el tama√±o del cursor al hacer clic
    document.getElementById('cursor').style.transform = 'scale(0.8)';
});

// Event Listener para restaurar el cursor despu√©s del clic
document.addEventListener('mouseup', () => {
    // Restauramos el tama√±o original del cursor
    document.getElementById('cursor').style.transform = 'scale(1)';
});

// Configuraci√≥n de intervalos para las actualizaciones peri√≥dicas
setInterval(updateMessage, 5000);         // Actualiza el mensaje cada 5 segundos
setInterval(updateProgressBar, 200);      // Actualiza la barra de progreso cada 200ms
setInterval(createTimeAnomaly, 10000);    // Crea una anomal√≠a temporal cada 10 segundos

// Iniciamos el contador
updateCountdown();


// Aplicamos la animaci√≥n de distorsi√≥n al body
document.body.style.animation = 'distort 10s infinite alternate';

